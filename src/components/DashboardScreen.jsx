import React, { useState, useEffect } from 'react';

const DashboardScreen = ({
  onClose,
  records,
  setShowBMIModal,
  setShowSleepTracker,
  setShowHeartRate,
  setShowAyurvedaTips,
  activityGoals,
  selectedLanguage,
}) => {
  console.log('Selected Language:', selectedLanguage); // Debug log
  const lang = selectedLanguage || 'en'; // Fallback to English if undefined

  const totalRecords = records ? records.length : 0;
  const avgSugar = totalRecords > 0
    ? records.reduce((sum, r) => sum + (parseFloat(r.sugar) || 0), 0) / totalRecords
    : 0;
  const avgBP = totalRecords > 0
    ? records.reduce((sum, r) => sum + (r.bp ? parseFloat(r.bp.split('/')[0]) || 0 : 0), 0) / totalRecords
    : 0;
  const [steps, setSteps] = useState(0);
  const [screenTime, setScreenTime] = useState(0);
  const [timestamp, setTimestamp] = useState(new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' }));
  const [sleepDuration, setSleepDuration] = useState(0);
  const [heartRate, setHeartRate] = useState(0);

  useEffect(() => {
    let stepCount = 0;
    const handleMotion = (event) => {
      const acceleration = event.accelerationIncludingGravity;
      if (acceleration && Math.abs(acceleration.z) > 10) stepCount++;
      setSteps(stepCount);
    };
    if ('DeviceMotionEvent' in window && 'permissions' in navigator) {
      navigator.permissions.query({ name: 'accelerometer' }).then((permission) => {
        if (permission.state === 'granted') {
          window.addEventListener('devicemotion', handleMotion);
        } else {
          setSteps(Math.floor(Math.random() * 10000));
        }
      });
    } else {
      setSteps(Math.floor(Math.random() * 10000));
    }

    let timeSpent = 0;
    const updateScreenTime = () => {
      timeSpent += 1;
      setScreenTime(timeSpent);
    };
    const interval = setInterval(updateScreenTime, 60000);
    const visibilityHandler = () => {
      if (document.hidden) clearInterval(interval);
      else setInterval(updateScreenTime, 60000, interval);
    };
    document.addEventListener('visibilitychange', visibilityHandler);

    const sleepRecord = records ? records.find(r => r.type === 'sleep') : null;
    setSleepDuration(sleepRecord ? parseFloat(sleepRecord.duration) || 0 : 0);

    const timestampInterval = setInterval(() => setTimestamp(new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })), 60000);
    return () => {
      if ('DeviceMotionEvent' in window) window.removeEventListener('devicemotion', handleMotion);
      document.removeEventListener('visibilitychange', visibilityHandler);
      clearInterval(interval);
      clearInterval(timestampInterval);
    };
  }, [records]);

  const healthStatus = avgSugar > 200 || avgBP > 140 ? 'Caution: Elevated Levels' : 'Normal';
  const stepProgress = (steps / (activityGoals?.steps || 10000)) * 100 || 0;

  const translations = {
    titles: {
      en: 'Health Dashboard',
      ta: 'роЙроЯро▓рпН роиро▓ роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ',
      hi: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдбреИрд╢рдмреЛрд░реНрдб',
      te: 'р░Жр░░р▒Лр░Чр▒Нр░п р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н',
      kn: 'р▓Жр▓░р│Лр▓Чр│Нр▓п р▓бр│Нр▓пр▓╛р▓╢р│НтАМр▓мр│Лр▓░р│Нр▓бр│Н',
    },
    labels: {
      totalRecords: { en: 'Total Records', ta: 'роорпКродрпНрод рокродро┐ро╡рпБроХро│рпН', hi: 'рдХреБрд▓ рд░рд┐рдХреЙрд░реНрдбреНрд╕', te: 'р░ор▒Кр░др▒Нр░др░В р░░р░┐р░Хр░╛р░░р▒Нр░бр▒НтАМр░▓р▒Б', kn: 'р▓Тр▓Яр│Нр▓Яр│Б р▓жр▓╛р▓Цр▓▓р│Жр▓Чр▓│р│Б' },
      steps: { en: 'Steps', ta: 'рокроЯро┐роХро│рпН', hi: 'рдЪрд░рдг', te: 'р░Ъцнеф╝Рр░▓р▒Б', kn: 'р▓╣р│Жр▓Ьр│Нр▓Ьр│Жр▓Чр▓│р│Б' },
      screenTime: { en: 'Screen Time (hrs)', ta: 'родро┐ро░рпИ роирпЗро░роорпН (роорогро┐)', hi: 'рд╕реНрдХреНрд░реАрди рд╕рдордп (рдШрдВрдЯреЗ)', te: 'р░╕р▒Нр░Хр▒Нр░░р▒Ар░ир▒Н р░Яр▒Ир░В (р░Чр░Вр░Яр░▓р▒Б)', kn: 'р▓др│Жр▓░р│Ж р▓╕р▓ор▓п (р▓Чр▓Вр▓Яр│Жр▓Чр▓│р│Б)' },
      sleep: { en: 'Sleep (hrs)', ta: 'родрпВроХрпНроХроорпН (роорогро┐)', hi: 'рдиреАрдВрдж (рдШрдВрдЯреЗ)', te: 'р░ир░┐р░жр▒Нр░░ (р░Чр░Вр░Яр░▓р▒Б)', kn: 'р▓ир▓┐р▓жр│Нр▓░р│Ж (р▓Чр▓Вр▓Яр│Жр▓Чр▓│р│Б)' },
      healthStatus: { en: 'Health Status', ta: 'роЙроЯро▓рпН роиро▓ роиро┐ро▓рпИ', hi: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реНрдерд┐рддрд┐', te: 'р░Жр░░р▒Лр░Чр▒Нр░п р░╕р▒Нр░ер░┐р░др░┐', kn: 'р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╕р│Нр▓ер▓┐р▓др▓┐' },
      updated: { en: 'Updated', ta: 'рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ', hi: 'рдЕрджреНрдпрддрди', te: 'р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐', kn: 'р▓Ер▓кр│НтАМр░бр│Зр▓Яр│Н р▓ор▓╛р▓бр▓▓р▓╛р▓Чр▓┐р▓жр│Ж' },
    },
    status: {
      caution: { en: 'Caution: Elevated Levels', ta: 'роОроЪрпНроЪро░ро┐роХрпНроХрпИ: роЙропро░рпН роЕро│ро╡рпБроХро│рпН', hi: 'рдЪреЗрддрд╛рд╡рдиреА: рдКрдВрдЪреЗ рд╕реНрддрд░', te: 'р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х: р░Ор░Хр▒Нр░Хр▒Бр░╡ р░╕р▒Нр░ер░╛р░пр░┐р░▓р▒Б', kn: 'р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж: р▓Ор▓др│Нр▓др▓░р▓ж р▓ор▓Яр│Нр▓Яр▓Чр▓│р│Б' },
      normal: { en: 'Normal', ta: 'роЪро╛родро╛ро░рог', hi: 'рд╕рд╛рдорд╛рдиреНрдп', te: 'р░╕р░╛р░зр░╛р░░р░г', kn: 'р▓╕р▓╛р▓ор▓╛р▓ир│Нр▓п' },
    },
    tips: {
      screenTimeHigh: { en: 'Tip: Take a break!', ta: 'роЙродро╡ро┐: роЗроЯрпИро╡рпЖро│ро┐ роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН!', hi: 'рд╕реБрдЭрд╛рд╡: рдмреНрд░реЗрдХ рд▓реЗрдВ!', te: 'р░╕р░▓р░╣р░╛: р░Тр░Х р░мр▒Нр░░р▒Зр░Хр▒Н р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐!', kn: 'р▓╕р▓▓р▓╣р│Ж: р▓Тр▓Вр▓жр│Б р▓╡р▓┐р▓░р▓╛р▓о р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐!' },
      screenTimeGood: { en: 'Good so far!', ta: 'роЗродрпБро╡ро░рпИ роиро▓рпНро▓!', hi: 'рдЕрдм рддрдХ рдЕрдЪреНрдЫрд╛!', te: 'р░Зр░кр▒Нр░кр░Яр░┐ р░╡р░░р░Хр▒Б р░мр░╛р░Чр▒Бр░Вр░жр░┐!', kn: 'р▓Зр▓▓р│Нр▓▓р▓┐р▓пр▓╡р▓░р│Жр▓Чр│Ж р▓Тр▓│р│Нр▓│р│Жр▓пр▓жр│Б!' },
      sleepLow: { en: 'Aim for 7-9 hrs', ta: '7-9 роорогро┐ роирпЛроХрпНроХрооро╛роХроХрпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН', hi: '7-9 рдШрдВрдЯреЗ рдХрд╛ рд▓рдХреНрд╖реНрдп рд░рдЦреЗрдВ', te: '7-9 р░Чр░Вр░Яр░▓ р░Хр▒Лр░╕р░В р░▓р░Хр▒Нр░╖р▒Нр░пр░Вр░Чр░╛ р░Йр░Вр░Ър░Вр░бр░┐', kn: '7-9 р▓Чр▓Вр▓Яр│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Чр│Бр▓░р▓┐ р▓Зр▓бр▓┐' },
      sleepOptimal: { en: 'Optimal!', ta: 'роЪро░ро┐ропро╛ройродрпБ!', hi: 'рдЙрддреНрдХреГрд╖реНрдЯ!', te: 'р░Ър░┐р░╡р░░р░┐!', kn: 'р▓Йр▓др│Нр▓др▓о!' },
    },
    buttons: {
      bmiCheck: { en: 'BMI Check', ta: 'BMI роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ', hi: 'BMI рдЬрд╛рдВрдЪ', te: 'BMI р░др░ир░┐р░Цр▒А', kn: 'BMI р▓кр▓░р│Ар▓Хр│Нр▓╖р│Ж' },
      sleepTracker: { en: 'Sleep Tracker', ta: 'родрпВроХрпНроХроорпН роХрогрпНроХро╛рогро┐рокрпНрокрпБ', hi: 'рдиреАрдВрдж рдЯреНрд░реИрдХрд░', te: 'р░ир░┐р░жр▒Нр░░ р░Яр▒Нр░░р░╛р░Хр░░р▒Н', kn: 'р▓ир▓┐р▓жр│Нр▓░р│Ж р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр▓░р│Н' },
      heartRate: { en: 'Heart Rate', ta: 'роЗродроп родрпБроЯро┐рокрпНрокрпБ', hi: 'рд╣реГрджрдп рдЧрддрд┐', te: 'р░╣р░╛р░░р▒Нр░Яр▒Н р░░р▒Зр░Яр▒Н', kn: 'р▓╣р│Гр▓жр▓п р▓жр▓░' },
      ayurvedaTips: { en: 'Ayurveda Tips', ta: 'роЖропрпБро░рпНро╡рпЗрод роХрпБро▒ро┐рокрпНрокрпБроХро│рпН', hi: 'рдЖрдпреБрд░реНрд╡реЗрдж рдЯрд┐рдкреНрд╕', te: 'р░Жр░пр▒Бр░░р▒Нр░╡р▒Зр░ж р░Яр░┐р░кр▒Нр░╕р▒Н', kn: 'р▓Жр▓пр│Бр▓░р│Нр▓╡р│Зр▓ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б' },
      close: { en: 'Close', ta: 'роорпВроЯрпБ', hi: 'рдмрдВрдж рдХрд░реЗрдВ', te: 'р░ор▒Вр░╕р░┐р░╡р▒Зр░пр░Вр░бр░┐', kn: 'р▓ор│Бр▓Ър│Нр▓Ър▓┐' },
    },
  };

  return (
    <div style={{
      position: 'fixed', inset: '0', background: 'rgba(0, 0, 0, 0.7)', display: 'flex', alignItems: 'center',
      justifyContent: 'center', zIndex: '50', backdropFilter: 'blur(5px)'
    }}>
      <div style={{
        background: '#ffffff', padding: '24px', borderRadius: '12px', boxShadow: '0 6px 12px rgba(0, 0, 0, 0.2)',
        maxWidth: '480px', width: '90%', maxHeight: '90vh', overflowY: 'auto'
      }}>
        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1a3c34', textAlign: 'center', marginBottom: '20px', textTransform: 'uppercase', letterSpacing: '0.5px' }}>
          {translations.titles[lang]}
        </h2>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
          <div style={{
            display: 'flex', alignItems: 'center', background: '#e6f3f5', padding: '16px', borderRadius: '8px',
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)', transition: 'transform 0.2s'
          }} onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'} onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}>
            <span style={{ fontSize: '20px', color: '#1a7f6f', marginRight: '12px' }}>ЁЯУК</span>
            <p style={{ fontSize: '16px', fontWeight: '500', color: '#1a3c34', margin: 0 }}>
              {translations.labels.totalRecords[lang]}: <span style={{ fontWeight: '600', color: '#1a7f6f' }}>{totalRecords}</span>
            </p>
          </div>
          <div style={{
            display: 'flex', alignItems: 'center', background: '#e6f3f5', padding: '16px', borderRadius: '8px',
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)', transition: 'transform 0.2s'
          }} onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'} onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}>
            <span style={{ fontSize: '20px', color: '#1a7f6f', marginRight: '12px' }}>ЁЯСЯ</span>
            <p style={{ fontSize: '16px', fontWeight: '500', color: '#1a3c34', margin: 0 }}>
              {translations.labels.steps[lang]}: <span style={{ fontWeight: '600', color: '#1a7f6f' }}>{steps}</span> ({stepProgress.toFixed(0)}% of {(activityGoals?.steps || 10000)})
            </p>
          </div>
          <div style={{
            display: 'flex', alignItems: 'center', background: '#e6f3f5', padding: '16px', borderRadius: '8px',
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)', transition: 'transform 0.2s'
          }} onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'} onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}>
            <span style={{ fontSize: '20px', color: '#1a7f6f', marginRight: '12px' }}>тП░</span>
            <p style={{ fontSize: '16px', fontWeight: '500', color: '#1a3c34', margin: 0 }}>
              {translations.labels.screenTime[lang]}: <span style={{ fontWeight: '600', color: '#1a7f6f' }}>{screenTime}</span><br />
              {screenTime > 4 ? <span style={{ color: '#d32f2f' }}>{translations.tips.screenTimeHigh[lang]}</span> : <span style={{ color: '#388e3c' }}>{translations.tips.screenTimeGood[lang]}</span>}
            </p>
          </div>
          <div style={{
            display: 'flex', alignItems: 'center', background: '#e6f3f5', padding: '16px', borderRadius: '8px',
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)', transition: 'transform 0.2s'
          }} onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'} onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}>
            <span style={{ fontSize: '20px', color: '#1a7f6f', marginRight: '12px' }}>ЁЯТд</span>
            <p style={{ fontSize: '16px', fontWeight: '500', color: '#1a3c34', margin: 0 }}>
              {translations.labels.sleep[lang]}: <span style={{ fontWeight: '600', color: '#1a7f6f' }}>{sleepDuration}</span><br />
              {sleepDuration < 7 ? <span style={{ color: '#d32f2f' }}>{translations.tips.sleepLow[lang]}</span> : <span style={{ color: '#388e3c' }}>{translations.tips.sleepOptimal[lang]}</span>}
            </p>
          </div>
          <div style={{
            background: '#e6f3f5', padding: '16px', borderRadius: '8px', boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)'
          }}>
            <p style={{ fontSize: '16px', fontWeight: '500', color: '#1a3c34', margin: 0 }}>
              {translations.labels.healthStatus[lang]}: <span style={{ fontWeight: '600', color: avgSugar > 200 || avgBP > 140 ? '#d32f2f' : '#388e3c' }}>{translations.status[avgSugar > 200 || avgBP > 140 ? 'caution' : 'normal'][lang]}</span>
            </p>
            <p style={{ fontSize: '12px', color: '#4a704e', marginTop: '6px' }}>{translations.labels.updated[lang]}: {timestamp}</p>
          </div>
          <div style={{ display: 'flex', gap: '12px', justifyContent: 'center', marginTop: '20px' }}>
            <button
              onClick={() => setShowBMIModal(true)}
              style={{ background: '#1a7f6f', color: '#ffffff', padding: '10px 20px', borderRadius: '6px', border: 'none', cursor: 'pointer', fontWeight: '500' }}
            >{translations.buttons.bmiCheck[lang]}</button>
            <button
              onClick={() => setShowSleepTracker(true)}
              style={{ background: '#1a7f6f', color: '#ffffff', padding: '10px 20px', borderRadius: '6px', border: 'none', cursor: 'pointer', fontWeight: '500' }}
            >{translations.buttons.sleepTracker[lang]}</button>
            <button
              onClick={() => setShowHeartRate(true)}
              style={{ background: '#1a7f6f', color: '#ffffff', padding: '10px 20px', borderRadius: '6px', border: 'none', cursor: 'pointer', fontWeight: '500' }}
            >{translations.buttons.heartRate[lang]}</button>
            <button
              onClick={() => setShowAyurvedaTips(true)}
              style={{ background: '#2e7d32', color: '#ffffff', padding: '10px 20px', borderRadius: '6px', border: 'none', cursor: 'pointer', fontWeight: '500' }}
            >{translations.buttons.ayurvedaTips[lang]}</button>
          </div>
        </div>
        <div style={{ display: 'flex', justifyContent: 'center', marginTop: '24px' }}>
          <button
            onClick={onClose}
            style={{
              background: '#d32f2f', color: '#ffffff', padding: '12px 24px', borderRadius: '6px', border: 'none',
              cursor: 'pointer', fontWeight: '500', width: '150px', boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'
            }}
            onMouseOver={(e) => { e.target.style.background = '#b71c1c'; e.target.style.transform = 'translateY(-1px)'; }}
            onMouseOut={(e) => { e.target.style.background = '#d32f2f'; e.target.style.transform = 'translateY(0)'; }}
          >
            {translations.buttons.close[lang]}
          </button>
        </div>
      </div>
    </div>
  );
};

DashboardScreen.defaultProps = {
  activityGoals: { steps: 10000, exerciseMinutes: 30, waterIntake: 8 },
};

export default DashboardScreen;